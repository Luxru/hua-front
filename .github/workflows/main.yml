# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Hua APP CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [closed]
    

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9"]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: get src
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Generate the config file
      run: python generate.py
    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: "/home/${{ secrets.REMOTE_USER }}/hua-front/"
          EXCLUDE: "/node_modules/"
          SCRIPT_AFTER: |
            whoami
            cd /home/${{ secrets.REMOTE_USER }}/hua-front/
            echo ------------------------BEFORE BUILD ------------------------
            docker images
            docker build -t nextjs-docker .
            echo ------------------------AFTER BUILD ------------------------
            docker images
            echo ------------------------BEFORE STOP ------------------------
            docker ps
            docker stop nextjs-container
            echo ------------------------AFTER STOP ------------------------
            docker ps
            docker run -d -p 3000:3000 --name nextjs-container nextjs-docker
            echo ------------------------AFTER RUN ------------------------
            docker ps
            echo $RSYNC_STDOUT
